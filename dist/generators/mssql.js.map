{"version":3,"sources":["../../src/generators/mssql.js"],"names":["TYPES","pk","string","integer","date","time","double","timestamp","geometry","json","array","boolean","fts","MSSQL","identifier","length","column","type","test","name","columnName","change","tableName","newTable","replace","columnsForTable","join","method","indexName","columns","map","escape","c","unique","spatial","escapedSchema","tablePrefix","oldTable","whereClause","newView","filter","parts","Object","keys","field","push","viewName","projectionForView","table","into","from","SchemaGenerator"],"mappings":"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","file":"mssql.js","sourcesContent":["import SchemaGenerator from '../schema-generator';\nimport {format as fmt} from 'util';\n\nconst TYPES = {\n  pk: 'bigint NOT NULL IDENTITY(1,1) PRIMARY KEY',\n  string: 'varchar(max)',\n  integer: 'bigint',\n  date: 'date',\n  time: 'time',\n  double: 'float',\n  timestamp: 'datetime',\n  geometry: 'geography',\n  json: 'varchar(max)',\n  array: 'varchar(max)',\n  boolean: 'bit',\n  fts: 'varchar(max)'\n};\n\nexport default class MSSQL extends SchemaGenerator {\n  escape(identifier) {\n    if (identifier == null || identifier.length === 0) {\n      return '';\n    }\n\n    return '[' + identifier + ']';\n  }\n\n  typeForColumn(column) {\n    if (column.type === 'string') {\n      if (/_id$/.test(column.name) || column.length != null) {\n        return 'varchar(' + (column.length || '100') + ')';\n      }\n    }\n\n    return TYPES[column.type] || 'varchar(max)';\n  }\n\n  transformToText(columnName) {\n    return fmt('CAST(%s AS varchar(max))', columnName);\n  }\n\n  transformToDouble(columnName) {\n    return fmt('IIF(ISNUMERIC(%s), %s, NULL)', columnName, columnName);\n  }\n\n   createTable(change) {\n     return fmt('IF (NOT EXISTS(SELECT * FROM sysobjects WHERE (name=\\'%s\\')))\\nCREATE TABLE %s (\\n%s\\n);',\n               this.tableName(change.newTable).replace(/[\\[\\]]/g, ''),\n               this.tableName(change.newTable),\n               this.columnsForTable(change.newTable).join(',\\n'));\n   }\n\n  createIndex(change) {\n    const method = change.method || 'btree';\n    const indexName = this.indexName(change.newTable, change.columns);\n    const tableName = this.tableName(change.newTable);\n    const columns = change.columns.map(c => this.escape(c)).join(', ');\n    const unique = change.unique ? 'UNIQUE ' : '';\n    // const withClause = method === 'gin' ? ' WITH (fastupdate = off)' : '';\n\n    const spatial = method === 'spatial' ? ' SPATIAL' : '';\n\n    return fmt('CREATE%s %sINDEX %s ON %s (%s);',\n               spatial, unique, indexName, tableName, columns);\n  }\n\n  dropTable(change) {\n    return fmt('DROP TABLE IF EXISTS %s%s;',\n       this.escapedSchema(),\n       this.escape(this.tablePrefix + change.oldTable.name));\n  }\n\n  renameTable(change) {\n    return fmt('EXEC sp_rename \\'%s\\', \\'%s\\', \\'OBJECT\\';',\n       this.tableName(change.oldTable).replace(/[\\[\\]]/g, ''),\n       this.tableName(change.newTable).replace(/[\\[\\]]/g, ''));\n  }\n\n  createView(change) {\n    let whereClause = '';\n\n    if (change.newView.filter) {\n      const parts = [];\n\n      for (const field of Object.keys(change.newView.filter)) {\n        parts.push(this.escape(field) + \" = '\" + change.newView.filter[field] + \"'\");\n      }\n\n      whereClause = ' WHERE ' + parts.join(' AND ');\n    }\n\n    const parts = [];\n\n    // If the view already exists, drop it first before trying to create it\n    parts.push(fmt('DROP VIEW IF EXISTS %s;\\n',\n        this.viewName(change.newView)));\n    // Now create the view\n    parts.push(fmt('CREATE VIEW %s AS\\nSELECT\\n  %s\\nFROM %s%s;',\n        this.viewName(change.newView),\n        this.projectionForView(change.newView).join(',\\n  '),\n        this.tableName(change.newView.table),\n        whereClause));\n\n    return parts;\n  }\n\n  insertInto(into, from) {\n    const parts = [];\n\n    // Turn ON Identity Insert\n    parts.push(fmt('SET IDENTITY_INSERT %s ON;', this.tableName(into)));\n    // Insert Data\n    parts.push(super.insertInto(into, from));\n    // Turn OFF Identity Insert\n    parts.push(fmt('SET IDENTITY_INSERT %s OFF;', this.tableName(into)));\n\n    return parts;\n  }\n}\n"]}
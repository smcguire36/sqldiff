{"version":3,"sources":["../../src/generators/mssql.js"],"names":["TYPES","pk","string","integer","date","time","double","timestamp","geometry","json","array","boolean","fts","MSSQL","identifier","length","column","type","test","name","columnName","change","tableName","newTable","columnsForTable","join","method","indexName","columns","map","escape","c","unique","spatial","escapedSchema","tablePrefix","oldTable","whereClause","newView","filter","parts","Object","keys","field","push","viewName","projectionForView","table","into","from","SchemaGenerator"],"mappings":"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","file":"mssql.js","sourcesContent":["import SchemaGenerator from '../schema-generator';\nimport {format as fmt} from 'util';\n\nconst TYPES = {\n  pk: 'bigint NOT NULL IDENTITY(1,1) PRIMARY KEY',\n  string: 'varchar(max)',\n  integer: 'bigint',\n  date: 'date',\n  time: 'time',\n  double: 'float',\n  timestamp: 'datetime',\n  geometry: 'geography',\n  json: 'varchar(max)',\n  array: 'varchar(max)',\n  boolean: 'bit',\n  fts: 'varchar(max)'\n};\n\nexport default class MSSQL extends SchemaGenerator {\n  escape(identifier) {\n    if (identifier == null || identifier.length === 0) {\n      return '';\n    }\n\n    return '[' + identifier + ']';\n  }\n\n  typeForColumn(column) {\n    if (column.type === 'string') {\n      if (/_id$/.test(column.name) || column.length != null) {\n        return 'varchar(' + (column.length || '100') + ')';\n      }\n    }\n\n    return TYPES[column.type] || 'varchar(max)';\n  }\n\n  transformToText(columnName) {\n    return fmt('CAST(%s AS varchar(max))', columnName);\n  }\n\n  transformToDouble(columnName) {\n    return fmt('IIF(ISNUMERIC(%s), %s, NULL)', columnName, columnName);\n  }\n\n   createTable(change) {\n     return fmt('IF (NOT EXISTS(SELECT COUNT(*) FROM sysobjects WHERE (name=\\'%s\\')))\\nCREATE TABLE %s (\\n  %s\\n);',\n               this.tableName(change.newTable),\n               this.tableName(change.newTable),\n               this.columnsForTable(change.newTable).join(',\\n  '));\n   }\n\n  createIndex(change) {\n    const method = change.method || 'btree';\n    const indexName = this.indexName(change.newTable, change.columns);\n    const tableName = this.tableName(change.newTable);\n    const columns = change.columns.map(c => this.escape(c)).join(', ');\n    const unique = change.unique ? 'UNIQUE ' : '';\n    // const withClause = method === 'gin' ? ' WITH (fastupdate = off)' : '';\n\n    const spatial = method === 'spatial' ? ' SPATIAL' : '';\n\n    return fmt('CREATE%s %sINDEX %s ON %s (%s);',\n               spatial, unique, indexName, tableName, columns);\n  }\n\n  dropTable(change) {\n    return fmt('DROP TABLE IF EXISTS %s%s;',\n               this.escapedSchema(),\n               this.escape(this.tablePrefix + change.oldTable.name));\n  }\n\n  createView(change) {\n    let whereClause = '';\n\n    if (change.newView.filter) {\n      const parts = [];\n\n      for (const field of Object.keys(change.newView.filter)) {\n        parts.push(this.escape(field) + \" = '\" + change.newView.filter[field] + \"'\");\n      }\n\n      whereClause = ' WHERE ' + parts.join(' AND ');\n    }\n\n    const parts = [ super.createView(change) ];\n\n    // If the view already exists, drop it first before trying to create it\n    parts.push(fmt('DROP VIEW IF EXISTS %s;\\n',\n                this.escape(this.viewName(change.newView))));\n    // Now create the view\n    parts.push(fmt('CREATE VIEW %s AS\\nSELECT\\n  %s\\nFROM %s%s;',\n               this.viewName(change.newView),\n               this.projectionForView(change.newView).join(',\\n  '),\n               this.tableName(change.newView.table),\n               whereClause));\n\n    return parts;\n  }\n  insertInto(into, from) {\n    const parts = [ super.insertInto(into, from) ];\n\n    // parts.push(fmt(\"SELECT setval('%s', (SELECT MAX(id) FROM %s));\",\n    //                this.escapedSchema() + this.primaryKeySequenceName(into),\n    //                this.tableName(into)));\n\n    return parts;\n  }\n}\n"]}